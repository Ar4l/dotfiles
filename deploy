#!/usr/bin/env fish

source helper

function _install_topics -d "install one or more topics by calling topic/_init#(install)"
    set topics $argv

    function _install_topic -a topic
        source "$topic/_init"

        if _is_defined install
            _echo_ok "running $topic/_init#install()..."
            install
        else
            _echo_fail "$topic/_init#install() does not exist"
            _disable_topic $topic
            return 1
        end

        _link_topics $topic
    end

    for topic in $topics
        _enable_topic $topic; and _install_topic $topic
    end
end

function _link_topics -d "link one or more topics using stow if variable TARGET is defined"
    set topics $argv

    function _link_topic -a topic
        source "$topic/_init"

        if test $TARGET
            _echo_ok "linking $topic config files..."
            test "$TARGET" = "$HOME"; or command mkdir -p $TARGET
            command stow -v -t $TARGET $topic
        else
            _echo_ok "$topic/_init#TARGET not defined, skipping config files..."
        end

        if contains bin (ls $topic)
            _echo_ok "linking $topic bin..."
            command stow -v -t $XDG_DATA_BIN -d $topic bin
        end

        if contains conf.d (ls $topic); and test $FISH_CONFIG_HOME
            _echo_ok "linking $topic conf.d..."
            command stow -v -t $FISH_CONFIG_HOME -d $topic conf.d
        end
    end

    for topic in $topics
        _is_enabled_topic $topic; and _link_topic $topic
    end
end

function _relink_topics -d "relink one or more topics using stow"
    set topics $argv

    function _relink_topic -a topic
        source "$topic/_init"

        if test $TARGET
            _echo_ok "(re)linking $topic config files..."
            test "$TARGET" = "$HOME"; or command mkdir -p $TARGET
            command stow -v -t $TARGET -R $topic
        else
            _echo_ok "$topic/_init#TARGET not defined, skipping config files..."
        end

        if contains bin (ls $topic)
            _echo_ok "(re)linking $topic bin..."
            command stow -v -t $XDG_DATA_BIN -d $topic -R bin
        end

        if contains conf.d (ls $topic); and test $FISH_CONFIG_HOME
            _echo_ok "(re)linking $topic conf.d..."
            command stow -v -t $FISH_CONFIG_HOME -d $topic -R conf.d
        end
    end

    for topic in $topics
        _is_enabled_topic $topic; and _relink_topic $topic
    end
end

function _unlink_topics -d "unlink one or more topics using stow if variable TARGET is defined"
    set topics $argv

    function _unlink_topic -a topic
        source "$topic/_init"

        if test $TARGET
            _echo_ok "(un)linking $topic config files..."
            command stow -v -t $TARGET -D $topic
            test "$TARGET" = "$HOME"; or command rm -rvf $TARGET
        else
            _echo_ok "$topic/_init#TARGET not defined, skipping config files..."
        end

        if contains bin (ls $topic)
            _echo_ok "(un)linking $topic bin..."
            command stow -v -t $XDG_DATA_BIN -d $topic -D bin
        end

        if contains conf.d (ls $topic)
            _echo_ok "(un)linking $topic conf.d..."
            command stow -v -t $FISH_CONFIG_HOME -d $topic -D conf.d
        end
    end

    for topic in $topics
        _is_valid_topic $topic; and _unlink_topic $topic
    end
end

function _delete_topics -d "delete one or more topics by calling topic/_init#delete()"
    set topics $argv

    function _delete_topic -a topic
        source "$topic/_init"

        if _is_defined delete
            _echo_ok "running $topic/_init#delete()..."
            delete
        end

        _unlink_topics $topic
    end

    for topic in $topics
        _disable_topic $topic; and _delete_topic $topic
    end
end

function _echo_usage -d "prints a help message"
    printf "
    usage: ./deploy FLAGS TOPICS
    if no FLAGS are passed then given TOPICS are installed & linked

    valid FLAGS: -h -l -d -L
    -h: print this help message
    -l: link given TOPICS
    -d: delete given TOPICS
    -L: list enabled topics

    example usage:
    ./deploy base # install and link base
    ./deploy base zsh fish # install and link base, zsh & fish
    ./deploy -l base zsh fish # only link base, zsh & fish
    ./deploy -d tmux # delete tmux
    "
end

function deploy
    set options (fish_opt -s h) (fish_opt -s l) (fish_opt -s L)
    set options $options (fish_opt -s d) (fish_opt -s u) (fish_opt -s r)
    argparse -n deploy $options -- $argv
    set topics $argv

    function _any_topics -S
        test (count $topics) -gt 0
    end

    function _any_options -S
        test $_flag_h
        or test $_flag_l
        or test $_flag_L
        or test $_flag_d
        or test $_flag_u
        or test $flag_r
    end

    if not _any_topics; and not _any_options; or test $_flag_h
        _echo_usage
    end

    if test $_flag_L
        set count (cat "$PWD/.enabled_topics" | wc -l)
        if test $count -gt 0
            echo "Enabled topics:"
            echo
            cat "$PWD/.enabled_topics" | column
        else
            echo "No topics enabled!"
        end
    end

    test $_flag_l; and _link_topics $topics; and return 0

    test $_flag_u; and _unlink_topics $topics; and return 0

    test $_flag_r; and _relink_topics $topics; and return 0

    test $_flag_d; and _delete_topics $topics; and return 0

    _any_topics; and not _any_options; and _install_topics $topics
end

deploy $argv

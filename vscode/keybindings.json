// Place your key bindings in this file to override the defaults
[
  {
    "key"    : "ctrl+h",
    "command": "workbench.action.focusLeftGroup",
    "when"   : "editorFocus"
  },
  {
    "key"    : "cmd+k cmd+left",
    "command": "-workbench.action.focusLeftGroup"
  },
  {
    "key"    : "ctrl+l",
    "command": "workbench.action.focusRightGroup",
    "when"   : "editorFocus"
  },
  {
    "key"    : "cmd+k cmd+right",
    "command": "-workbench.action.focusRightGroup"
  },
  {
    "key"    : "ctrl+k",
    "command": "workbench.action.focusAboveGroup",
    "when"   : "editorFocus"
  },
  {
    "key"    : "cmd+k cmd+up",
    "command": "-workbench.action.focusAboveGroup"
  },
  {
    "key"    : "ctrl+j",
    "command": "workbench.action.focusBelowGroup",
    "when"   : "editorFocus"
  },
  {
    "key"    : "cmd+k cmd+down",
    "command": "-workbench.action.focusBelowGroup"
  },
  {
    "key": "ctrl+s \\",
    "command": "workbench.action.splitEditor",
    "when"   : "editorFocus"
  },
  {
    "key": "cmd+\\",
    "command": "-workbench.action.splitEditor"
  },
  {
    "key"    : "ctrl+s -",
    "command": "workbench.action.splitEditorOrthogonal",
    "when"   : "editorFocus"
  },
  {
    "key": "cmd+k cmd+\\",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key"    : "cmd+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key"    : "cmd+w",
    "command": "workbench.action.terminal.kill",
    "when"   : "terminalFocus"
  },
  {
    "key"    : "ctrl+shift+5",
    "command": "-workbench.action.terminal.split",
    "when"   : "terminalFocus"
  },
  {
    "key"    : "ctrl+s ;",
    "command": "workbench.action.showCommands"
  },
  {
    "key"    : "shift+cmd+p",
    "command": "-workbench.action.showCommands"
  },
  {
    "key"    : "ctrl+s p",
    "command": "workbench.action.focusPreviousGroup"
  },
  {
    "key"    : "ctrl+s n",
    "command": "workbench.action.focusNextGroup"
  },
  {
    "key"    : "alt+cmd+down",
    "command": "-workbench.action.terminal.focusNextPane",
    "when"   : "terminalFocus"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.focusActiveEditorGroup",
    "when"   : "terminalFocus"
  },
  {
    "key"    : "alt+cmd+up",
    "command": "-workbench.action.terminal.focusPreviousPane",
    "when"   : "terminalFocus"
  },
  {
    "key"    : "ctrl+s x",
    "command": "workbench.action.closeEditorsInGroup"
  },
  {
    "key"    : "cmd+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key"    : "ctrl+s q",
    "command": "workbench.action.closeAllGroups"
  },
  {
    "key"    : "cmd+k shift+cmd+w",
    "command": "-workbench.action.closeAllGroups"
  },
  {
    "key"    : "ctrl+]",
    "command": "workbench.action.terminal.focusNext",
    "when"   : "terminalFocus"
  },
  {
    "key"    : "ctrl+[",
    "command": "workbench.action.terminal.focusPrevious",
    "when"   : "terminalFocus"
  },
  {
    "key"    : "ctrl+enter",
    "command": "workbench.action.terminal.new",
    "when"   : "terminalFocus"
  },
  {
    "key"    : "ctrl+shift+`",
    "command": "-workbench.action.terminal.new"
  },
  {
    "key"    : "ctrl+s e",
    "command": "workbench.view.explorer"
  },
  {
    "key"    : "shift+cmd+e",
    "command": "-workbench.view.explorer"
  },
  {
    "key"    : "ctrl+s g",
    "command": "workbench.view.scm"
  },
  {
    "key"    : "ctrl+shift+g",
    "command": "-workbench.view.scm"
  },
  {
    "key"    : "ctrl+s /",
    "command": "workbench.view.search",
    "when"   : "!searchViewletVisible"
  },
  {
    "key"    : "shift+cmd+f",
    "command": "-workbench.view.search",
    "when"   : "!searchViewletVisible"
  },
  {
    "key"    : "ctrl+s m",
    "command": "workbench.actions.view.problems"
  },
  {
    "key"    : "shift+cmd+m",
    "command": "-workbench.actions.view.problems"
  },
  {
    "key"    : "ctrl+s o",
    "command": "workbench.action.output.toggleOutput"
  },
  {
    "key"    : "shift+cmd+u",
    "command": "-workbench.action.output.toggleOutput"
  },
  {
    "key": "tab",
    "command": "-acceptSelectedSuggestion",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "down",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "cmd+down",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "cmd+up",
    "command": "-selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "up",
    "command": "-selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "-selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+s s",
    "command": "workbench.action.files.save"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "python.execInTerminal"
  },
  {
    "key": "enter",
    "command": "workbench.action.debug.continue",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+s d",
    "command": "workbench.action.debug.start",
    "when": "!inDebugMode"
  },
  {
    "key": "f5",
    "command": "-workbench.action.debug.start",
    "when": "!inDebugMode"
  },
  {
    "key": "j",
    "command": "workbench.action.debug.stepInto",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f11",
    "command": "-workbench.action.debug.stepInto",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "k",
    "command": "workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "shift+f11",
    "command": "-workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "l",
    "command": "workbench.action.debug.stepOver",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f10",
    "command": "-workbench.action.debug.stepOver",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "q",
    "command": "workbench.action.debug.stop",
    "when": "inDebugMode"
  },
  {
    "key": "shift+f5",
    "command": "-workbench.action.debug.stop",
    "when": "inDebugMode"
  },
  {
    "key": "shift+enter",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "shift+cmd+f5",
    "command": "-workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "tab",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "shift+tab",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+r m",
    "command": "python.refactorExtractMethod",
    "when": "editorHasSelection"
  },
  {
    "key": "ctrl+r v",
    "command": "python.refactorExtractVariable",
    "when": "editorHasSelection"
  },
  {
    "key": "]",
    "command": "editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "f7",
    "command": "-editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "[",
    "command": "editor.action.diffReview.prev",
    "when": "isInDiffEditor"
  },
  {
    "key": "shift+f7",
    "command": "-editor.action.diffReview.prev",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+z",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+.",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "editorTextFocus"
  },
  {
    "key": "f9",
    "command": "-editor.debug.action.toggleBreakpoint",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+,",
    "command": "editor.debug.action.conditionalBreakpoint"
  }
]

" see :h defaults.vim for more details
unlet! skip_default_vim
source $VIMRUNTIME/defaults.vim

set background=dark
set termguicolors
color retrobox

" settings {{{
set laststatus=2

set number
set relativenumber

set ignorecase
set smartcase
set infercase

set splitright
set splitbelow

set noswapfile

set clipboard+=unnamed

set breakindent
set linebreak
set nojoinspaces
set autoindent

set autowrite
set autoread

" NOTE see :h fo-table for more details
" I prefer to wrap the text automatically, but not comments
set formatoptions=t
set formatoptions+=r
set formatoptions+=o
set formatoptions+=/
set formatoptions+=q
set formatoptions+=n
set formatoptions+=l
set formatoptions+=1
set formatoptions+=j
" set textwidth=70

" XXX see :help sortmess for more info
set shortmess=a " short for shortmess=filmnrwx
set shortmess+=o
set shortmess+=O
set shortmess+=s
set shortmess+=t
set shortmess+=T
set shortmess+=W
set shortmess+=I

set wildmenu
set wildoptions=pum
set wildmode=longest:full
set wildmode+=full

set list
set listchars=nbsp:⦸
set listchars+=extends:»
set listchars+=precedes:«
set listchars+=tab:▷⋯
set listchars+=trail:•

set spelllang=en_GB
" end settings }}}

" autocommands {{{
" Indicate insert mode using cursorline
function! AruInsertModeAutocmds() abort
  augroup AruInsertMode
    autocmd!
    autocmd InsertEnter,InsertLeave * set cursorline!
  augroup END
endfunction
call AruInsertModeAutocmds()

function! AruWindowAutocmds() abort
  augroup AruWindow
    autocmd!
    autocmd VimResized * wincmd =
  augroup END
endfunction
call AruWindowAutocmds()

function! AruHelptagsAutocmds() abort
  augroup AruHelptags
    autocmd!
    autocmd VimEnter * helptags ALL
  augroup END
endfunction
call AruHelptagsAutocmds()

" end autocommands }}}

" keybindings {{{
let mapleader = "\<Space>"
nmap <leader>so :source $MYVIMRC<cr>
nmap j gj
nmap k gk

function! AruFiletypeKeybindings() abort
  augroup AruFiletypeKeys
    autocmd!
    autocmd FileType help nmap <buffer> q :close<cr>
    autocmd FileType qf nmap <buffer> q :close<cr>
    autocmd FileType fugitive nmap <buffer> q gq
  augroup END
endfunction
call AruFiletypeKeybindings()

" end keybindings }}}

" statusline {{{1
set statusline=\ 
set statusline+=%<
set statusline+=%{aru#statusline_fileprefix()}
set statusline+=%t
set statusline+=\ 
set statusline+=%([%{aru#statusline_ft()}%{aru#statusline_fenc()}%R%M]%)
set statusline+=%=
set statusline+=\ 
set statusline+=%l:%L:%P
set statusline+=\ 
" }}}

" spacing {{{1
" XXX Uncomment the following settings to indent using (two) spaces if vim does
" not ship with editorconfig plugin
" set expandtab
" set tabstop=2
" set shiftwidth=2
" set smarttab
packadd editorconfig
" }}}

" vim:foldmethod=marker

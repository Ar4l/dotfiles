# vim: filetype=zsh foldmethod=marker
# helper function for publishing content.

# Init {{{
local PUBPRG=pandoc
local SRCFMT="md"
local PUBFMT="html"
local SRCDIR="$HOME/org"
local PUBDIR="$SRCDIR/docs"
local FILESRX='^\d+-\d+-\d+--\w+--\w+'
local SRCFILES="/tmp/src.txt"
local PUBFILES="/tmp/pub.txt"
local SRCNAME
local TEMPLATE
# }}}

# get_template {{{
  emulate -L zsh
__get_template() {
  # taken from https://github.com/jgm/pandoc/issues/1958#issuecomment-81978951
  # extract the template from the SCRFILE else use default template
  TEMPLATE=$(sed -n 's/^template:[ ][ ]*\(.*\)/\1/p' $SRCDIR/$SRCNAME.$SRCFMT | sed 's/^\(..*\)$/--template=\1/')
  [[ -z "$TEMPLATE" ]] && TEMPLATE='--standalone'
}
# }}}

# sync {{{
__sync() {
  emulate -L zsh
  fd --extension $SRCFMT $FILESRX $SRCDIR --exec echo {/.} | sort > $SRCFILES
  fd --extension $PUBFMT $FILESRX $PUBDIR --exec echo {/.} | sort > $PUBFILES
}
# }}}

# ls {{{
__ls() {
  emulate -L zsh

  __sync

  if [[ -n "$2" ]]; then
    local NAME="${2:t:r}"
    if [[ -e "$PUBDIR/$NAME.$PUBFMT" ]]; then
      echo "$2 is published."
    else
      echo "$2 is unpublished."
    fi
  else
    # print all published files
    comm -12 $SRCFILES $PUBFILES | column
  fi
}
# }}}

# all {{{
__all() {
  emulate -L zsh

  __sync
  echo -n "Info: publish $(cat $PUBFILES | wc -l) files? [y/n]: "
  read ANS
  [[ "${ANS:l}" != "y" ]] && return 1

  for SRCNAME in $(comm -12 $SRCFILES $PUBFILES); do # published files
    __get_template
    pandoc ${@:2} $TEMPLATE --output $PUBDIR/$SRCNAME.$PUBFMT $SRCNAME.$SRCFMT
  done
}
# }}}

# Main {{{
case "$1" in
  ls )
    __ls "${@:2}"
    ;;
  all )
    __all "${@:2}"
    ;;
  * )
    if [[ -e "$SRCDIR/$1" ]]; then
      SRCNAME="${1:t:r}" # only the name
      __get_template
      echo "pandoc ${@:2} $TEMPLATE --output $PUBDIR/$SRCNAME.$PUBFMT $SRCNAME.$SRCFMT"
    fi
    ;;
esac
# }}}


" see :h defaults.vim for more details
unlet! skip_default_vim
source $VIMRUNTIME/defaults.vim

" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
set nocompatible

" Turn on syntax highlighting.
syntax on

" Disable the default Vim startup message.
set shortmess+=I

" Show line numbers.
set number

" " This enables relative line numbering mode. With both number and
" set relativenumber
set norelativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase
" set infercase

set splitright " open new v-splits on the right
set splitbelow " open new h-splits below

" Enable searching as you type, rather than waiting till you press enter.
set incsearch

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" I still don't know how useful these things are
set noswapfile

" set clipboard+=unnamed

set breakindent
set linebreak
set nojoinspaces
set autoindent

" always write on close
set autowrite
" always read on open???
set autoread

" XXX see :h fo-table for more details
" I prefer to wrap the text automatically, but not comments
set formatoptions=t
set formatoptions+=r
set formatoptions+=o
set formatoptions+=/
set formatoptions+=q
set formatoptions+=n
set formatoptions+=l
set formatoptions+=1
set formatoptions+=j
" set textwidth=70

" XXX see :help sortmess for more info
set shortmess=a " short for shortmess=filmnrwx
set shortmess+=o
set shortmess+=O
set shortmess+=s
set shortmess+=t
set shortmess+=T
set shortmess+=W
set shortmess+=I

" auto expand command menus
set wildmenu
set wildoptions=pum
set wildmode=longest:full
set wildmode+=full

" show hidden spaces & indicate long lines
set list
set listchars=nbsp:⦸
set listchars+=extends:»
set listchars+=precedes:«
set listchars+=tab:▷⋯
set listchars+=trail:•

set fillchars=diff:∙
set fillchars+=fold:∙
set fillchars+=eob: 
set fillchars+=vert:┃

" start unfolded
set foldlevelstart=20
"
" statusline {{{1
set statusline=\ 
set statusline+=%<
set statusline+=%{aru#statusline_fileprefix()}
set statusline+=%t
set statusline+=\ 
set statusline+=%([%{aru#statusline_ft()}%{aru#statusline_fenc()}%R%M]%)
set statusline+=%=
set statusline+=\ 
set statusline+=%l:%L:%P
set statusline+=\ 
" }}}

" spacing {{{1
" XXX Uncomment the following settings to indent using (two) spaces if vim does
" not ship with editorconfig plugin
" set expandtab
" set tabstop=2
" set shiftwidth=2
" set smarttab
packadd editorconfig
" }}}

" figure out filetype on open
filetype plugin indent on
" show existing tab with 2 spaces width
set tabstop=2
" when indenting with '>', use 2 spaces width
set shiftwidth=2
" expand tabs to spaces
" set expandtab


call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Essentials
Plug 'morhetz/gruvbox'							" Proper groovy 
Plug 'tpope/vim-sensible'						" Better defaults
" Plug 'preservim/nerdtree'						" Actual file browser

" " Autocompletion
" Plug 'prabirshrestha/asyncomplete.vim' 			" auto completions please
" Plug 'prabirshrestha/vim-lsp'					" language server to provide them
" Plug 'prabirshrestha/asyncomplete-lsp.vim'		" link ls to completions 
" Plug 'mattn/vim-lsp-settings'					" install LS for open file 

" Other
Plug 'junegunn/vim-easy-align'					" Easy alignment as it should be
Plug 'mileszs/ack.vim'                  " for the day I learn how to use ack
" Plug 'ctrlpvim/ctrlp.vim'
" Plug 'easymotion/vim-easymotion'

" Kitty integration
Plug 'NikoKS/kitty-vim-tmux-navigator' 			" Navigation with Ctrl+hjkl
Plug 'sainnhe/gruvbox-material'					" match with kitty (easy on eyes)

" Aru's recommendations
Plug 'tpope/vim-eunuch'         " vim sugar for UNIX 
Plug 'tpope/vim-obsession'      " manage sessions
Plug 'tpope/vim-surround'       " ysiw] to [surround]
Plug 'tpope/vim-endwise'        " end if-like structs
Plug 'tpope/vim-repeat'         " make . better 
Plug 'tpope/vim-apathy'         " set 'path' option for file
Plug 'tpope/vim-fugitive'       " git integration with :G
Plug 'tpope/vim-git'            " not git

Plug 'tpope/vim-dispatch'       " no clue, something backend
Plug 'tpope/vim-markdown'       " better markdown support
Plug 'tpope/vim-vinegar'        " more effin keybinds for file nav

" todo 
Plug 'tpope/vim-unimpaired'     " bunch of complementary mappings
" Plug 'tpope/vim-abolish'        " working with word variant{,s}
" Plug 'tpope/vim-projectionist'  " templates? why is this pope so weird
" Plug 'tpope/vim-rsi'            " emacs key bidnings?
" Plug 'wincent/ferret'           " multi-file find & replace (who needs a vim plugin for this?)
" Plug 'wincent/pinnacle'         " manipulate :highlight groups?
" Plug 'jpalardy/vim-slime'       " i read emacs and lisp and wanted to die

Plug 'tpope/vim-sleuth'         " get shiftwidth from current file
Plug 'tpope/vim-commentary'     " comment w gcc

Plug 'wincent/terminus'         " better term: mouse, cursor, focus
Plug 'wincent/loupe'            " better search, <leader>n for highlights
Plug 'junegunn/fzf.vim'         " fzf-vim integration

Plug 'lervag/vimtex'            " tex support


if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf'
else
  " fzf does not exist on the device so install it
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
endif

call plug#end()

" vimtex
let g:vimtex_fold_enabled = 1 " turn on folding in tex files
let g:vimtex_bib_fold_enabled = 1 " turn on folding in bib files

" fzf {{{2
nmap <leader>t :Files<cr>
nmap <leader><leader> :Buffers<cr>
nmap <leader>h :Helptags<cr>
nmap <leader>l :BLines<cr>
nmap <leader>. :BTags<cr>

" NOTE: stolen from fzf.vim README
" Preview window is hidden by default. You can toggle it with ctrl-/.
" It will show on the right with 50% width, but if the width is smaller
" than 70 columns, it will show above the candidate list
let g:fzf_vim = {}
let g:fzf_vim.preview_window = []
" end fzf}}}
" markdown {{{2
let g:markdown_folding = 1
" end markdown}}}
" ferret {{{2
let g:FerretMap = 0 " do not create keybindings
" end ferret }}}
" vim-easy-align {{{2
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" end vim-easy-align }}}
" vim-slime {{{2
" let g:slime_target = 'tmux'
" let g:slime_bracketed_paste = 1
" end vim-slime}}}
" end pack }}}

" turn on signcolumn permanently
" this shows things like vcs, fold markers, etc.
" set signcolumn=auto
" end settings }}}

" autocommands {{{
function! AruWindowAutocmds() abort
  augroup AruWindow
    autocmd!
    autocmd VimResized * wincmd =
  augroup END
endfunction
call AruWindowAutocmds()

function! AruHelptagsAutocmds() abort
  augroup AruHelptags
    autocmd!
    autocmd VimEnter * helptags ALL
  augroup END
endfunction
call AruHelptagsAutocmds()

" end autocommands }}}

" keybindings {{{
let mapleader = "\<Space>"
nmap <leader>so :source $MYVIMRC<cr>
" nmap j gj
" nmap k gk
if v:count == 0
  nmap j gj
  nmap k gk
endif
nmap <leader>q :quit<cr>

" end keybindings }}}

" ftplugin {{{
function! AruFiletypePlugins() abort
  augroup AruFiletypePlugins
    autocmd!
    autocmd FileType gitcommit setlocal spell
    autocmd FileType man,help let b:EditorConfig_disable = 1
    autocmd FileType quarto setlocal filetype=markdown.quarto
  augroup END
endfunction
call AruFiletypePlugins()
" end ftplugin }}}

if has('termguicolors')
  set termguicolors
endif

" function! AruHighlights() abort
"   augroup AruHighlights
"     autocmd!
"     autocmd VimEnter * call aru#highlight_overrides()
"   augroup END
" endfunction
" call AruHighlights()
" end highlights }}}

" vim:foldmethod=marker foldlevelstart=99


if (empty($TMUX))
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

" colours 
set background=dark
colorscheme gruvbox

"" kitty stuff
" mouse support
set mouse=a
set ttymouse=sgr
set balloonevalterm

" " styled and colored underline support
" NOTE: currently breaks rendering completely
" let &t_au = "\e[58:5:%dm"
" let &t_8u = "\e[58:2:%lu:%lu:%lum"
" let &t_us = "\e[4:2m"
" let &t_cs = "\e[4:3m"
" let &t_ds = "\e[4:4m"
" let &t_ds = "\e[4:5m"
" let &t_ce = "\e[4:0m"
" " strikethrough
" let &t_ts = "\e[9m"
" let &t_te = "\e[29m"
" " truecolor support
" let &t_8f = "\e[38:2:%lu:%lu:%lum"
" let &t_8b = "\e[48:2:%lu:%lu:%lum"
" let &t_rf = "\e]10;?\e\\"
" let &t_rb = "\e]11;?\e\\"
" " bracketed paste
" let &t_be = "\e[?2004h"
" let &t_bd = "\e[?2004l"
" let &t_ps = "\e[200~"
" let &t_pe = "\e[201~"
" " cursor control
" let &t_rc = "\e[?12$p"
" let &t_sh = "\e[%d q"
" let &t_rs = "\ep$q q\e\\"
" let &t_si = "\e[5 q"
" let &t_sr = "\e[3 q"
" let &t_ei = "\e[1 q"
" let &t_vs = "\e[?12l"
" " focus tracking
" let &t_fe = "\e[?1004h"
" let &t_fd = "\e[?1004l"
" execute "set <focusgained>=\<esc>[i"
" execute "set <focuslost>=\<esc>[o"
" " window title
" let &t_st = "\e[22;2t"
" let &t_rt = "\e[23;2t"

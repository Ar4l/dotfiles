
### CONTROLS
# vim keybindings in copy mode
set -g mode-keys vi
set -g status-keys vi

# please don't fuck with my alt keys
set-option -g xterm-keys on

# Mouse controls
set -g mouse on

# but don't jump to prompt after a selection
unbind -T copy-mode-vi MouseDragEnd1Pane
# but this makes the copying flaky and requires me to press y.
# TODO: I just don't want to have my position change on the screen.

# no idea
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# we have scrollwheels now, only scroll by 1 line :)
bind-key -T copy-mode-vi WheelUpPane select-pane \; send-keys -t '{mouse}' -X clear-selection \; send-keys -t '{mouse}' -X -N 1 scroll-up
bind-key -T copy-mode-vi WheelDownPane select-pane \; send-keys -t '{mouse}' -X clear-selection \; send-keys -t '{mouse}' -X -N 1 scroll-down


# OTHER 

set -g default-shell /opt/homebrew/bin/zsh

# increase scrollback lines, we live in 2024
set -g history-limit 100000

# reload by C-b r
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# # SSH aware kitty change window
# if-shell '[ $SSH_TTY ]' 'to="--to=tcp:localhost:$KITTY_PORT "' 'to=""'
# move='kitty @ ${to}kitten neighboring_window.py'

# Key Binds
bind-key -n 'C-h' if-shell "[ #{pane_at_left} != 1 ]" "select-pane -L" "run-shell '$move left'"
bind-key -n 'C-j' if-shell "[ #{pane_at_bottom} != 1 ]" "select-pane -D" "run-shell '$move bottom'"
bind-key -n 'C-k' if-shell "[ #{pane_at_top} != 1 ]" "select-pane -U" "run-shell '$move top'"
bind-key -n 'C-l' if-shell "[ #{pane_at_right} != 1 ]" "select-pane -R" "run-shell '$move right'"


# Don't wrap searches; it's super confusing given tmux's reverse-ordering of
# position info in copy mode.
set-option -w -g wrap-search off


# Don't wrap searches; it's super confusing given tmux's reverse-ordering of
# position info in copy mode.
set-option -w -g wrap-search off

# Add : to the default list (" -_@") of word separators.
set-option -ga word-separators :/

# Make sure we always start at 1, even when invoked from a .tmux wrapper script.
set-environment -g SHLVL 1

set-option -g main-pane-height 75%
set-option -g main-pane-width 60%



### KEYBINDINGS

# TODO: would be lovely to have tab as a control key.
# that's C-i, but it interferes with nested vim sessions. 
# Seeing as Aru managed to put it to a damn space, surely tab is possible though.

# unbind-key n
# unbind-key "c"
# unbind C-b
set-option -g prefix C-b
# set-option -g prefix C-i
# bind-key C-i send-prefix

# navigate between panes
bind C-h select-pane -L
bind C-j select-pane -D
bind C-k select-pane -U
bind C-l select-pane -R

# resizing
unbind Left
unbind Right
unbind Down
unbind Up
bind -r Left resize-pane -L 5
bind -r Right resize-pane -R 5
bind -r Down resize-pane -D 5
bind -r Up resize-pane -U 5

# do not ask for confirmation
bind x kill-pane
bind o kill-pane -a # kill all panes except current
bind X kill-window

# Enter to start copy mode
# default: C-[
bind Enter copy-mode

# # set prefix to space
# unbind C-b
# set -g prefix C-Space

bind-key -n M-n new-window -c "#{pane_current_path}"
bind-key -n M-[ previous-window
bind-key -n M-] next-window
bind-key -n M-{ swap-window -t -1\; select-window -t -1
bind-key -n M-\} swap-window -t +1\; select-window -t +1

# more intuitive keybindings for splitting
# open new splits & windows with path of current pane
# unbind %
# unbind '"'
bind C-v split-window -h -c "#{pane_current_path}"
bind C-s split-window -v -c "#{pane_current_path}"

# Search back to last prompt (mnemonic: "[b]ack").
bind-key b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "❯"\; send-keys -X next-word

# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @plugin 'tmux-plugins/tmux-resurrect'

# bind-key -n M-1 select-window -t:1
# bind-key -n M-2 select-window -t:2
# bind-key -n M-3 select-window -t:3
# bind-key -n M-4 select-window -t:4
# bind-key -n M-5 select-window -t:5
# bind-key -n M-6 select-window -t:6
# bind-key -n M-7 select-window -t:7
# bind-key -n M-8 select-window -t:8
# bind-key -n M-9 select-window -t:9
# bind-key -n M-0 select-window -t:10
#
# unbind-key '"'
# unbind-key '%'
# bind-key -n M-- split-window -v -c "#{pane_current_path}"
# bind-key -n M-\\ split-window -h -c "#{pane_current_path}"
# bind-key -n M-_ split-window -fv -c "#{pane_current_path}"
# bind-key -n M-| split-window -fh -c "#{pane_current_path}"




### STATUS AND TITLE BARS

# Colors taken from Gruvbox (Dark)
text=#d79921                    # dark yellow
textbright=#fabd2f              # bright yellow
surface2=#585B70
gray=#928374

bg=#282828
bg1=#3c3836
bg2=#504945

set -g status on

set -g status-style "fg=$text bg=default"
set -g pane-border-style fg=$bg1
set -g pane-active-border-style fg=$bg2


# may be nice to reintroduce:  
set -g window-status-current-format "#[fg=$bg1,bg=$text,bold] #I #[fg=$text,bg=$bg2] #W #[fg=$text,bg=$bg2] #{s|$HOME|~|;s|.*/||:pane_current_path} "
set -g window-status-format "#[fg=$bg,bg=$bg2] #I #[fg=$gray,bg=#3c3836] #W #[fg=$gray,bg=#3c3836] #{s|$HOME|~|;s|.*/||:pane_current_path} "

# renumber windows sequentially after closing any of them
set -g renumber-windows on
set -g -w automatic-rename on
#
# start window and pane numbering at 1
set -g base-index 1
set -g pane-base-index 1

set -g bell-action none
set -g status-position bottom
set -g status-interval 5

set -g window-status-separator ' '
set -g status-right-length 100
set -g status-left-length 100
set -g status-left ""
set -g status-right ""
set -g status-justify centre

# TODO: what's the difference between titles and status
# - #S = session name
# - #T = pane title (~/.zshrc sets this to the last/current command)
set-option -g set-titles-string "#S • #T"
#
# Dynamically set terminal tab/window titles
set-option -g set-titles on

# But don't change tmux's own window titles.
set-option -w -g automatic-rename off

# address delay while switching vim mode
# TODO: what does this mean bro
set -s escape-time 0

# report focus events
# TODO: what does this mean bro
set -g focus-events on


# set -g monitor-activity off
# set -g visual-activity off

# set -q status-left-length 40
# set-option -g status-left '#[fg=yellow,bold,italics]#S § ' # SECTION SIGN (UTF-8: c2 a7)
# set-option -g status-right "#[fg=yellow,bold,italics]$USER@#h #[fg=magenta]%l:%M %p"
# set -g status-style 'bg=#373b41,fg=white,bold,italics'
# set-option -w -g window-status-current-format '#[reverse] #I:#W#F '
# set-option -w -g window-status-format ' #I:#W#{?#{==:#F,},  ,#F }'

## Term stuff
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

# Enable RGB colour if running in xterm(1)
set-option -sa terminal-overrides ",xterm*:Tc"

# Change the default $TERM to tmux-256color
set -g default-terminal "tmux-256color"
set-option -sa terminal-overrides ',alacritty:RGB'
set-option -ga terminal-overrides ',alacritty:Tc'
set-option -sa terminal-overrides ',xterm-kitty:RGB'
set-option -ga terminal-overrides ',xterm-kitty:Tc'
set-option -ga terminal-overrides ',xterm-256color:Tc'



#!/usr/bin/env fish

#########
#  env  #
#########

set XDG_CONFIG_HOME "$HOME/.config"
set XDG_DATA_HOME "$HOME/.local/share"
set XDG_DATA_BIN "$HOME/.local/bin"
set FISH_CONFIG_HOME "$XDG_CONFIG_HOME/fish/conf.d"
set DOTDIR "$HOME/dotfiles"

############
#  helper  #
############

source "$DOTDIR/helper"

function _install_topics -d "install one or more topics by calling topic/_init#(install)"
  set topics $argv

  function _install_topic -a topic
    source "$DOTDIR/$topic/_init"

    if _is_defined 'install'
      _echo_ok "running $topic/_init#install()..."
      install
    else
      _echo_fail "$topic/_init#install() does not exist"
      _disable_topic $topic
      return 1
    end

    _link_topics $topic
  end

  for topic in $topics
    _enable_topic $topic; and _install_topic $topic
  end
end

function _link_topics -d "link one or more topics using stow if variable TARGET is defined"
  set topics $argv

  function _link_topic -a topic
    source "$DOTDIR/$topic/_init"

    if test -n "$TARGET"
      _echo_ok "linking $topic config files..."
      test "$TARGET" = "$HOME"; or mkdir -p $TARGET
      stow -v -t $TARGET -d $DOTDIR $topic
    else
      _echo_ok "$topic/_init#TARGET not defined, skipping config files..."
    end

    if test -d "$DOTDIR/$topic/bin"
      _echo_ok "linking $topic bin..."
      stow -v -t $XDG_DATA_BIN -d "$DOTDIR/$topic" 'bin'
    end

    if test -d "$DOTDIR/$topic/conf.d"
      _echo_ok "linking $topic conf.d..."
      stow -v -t $FISH_CONFIG_HOME -d "$DOTDIR/$topic" 'conf.d'
    end
  end

  for topic in $topics
    _is_enabled_topic $topic; and _link_topic $topic
  end
end

function _relink_topics -d "relink one or more topics using stow"
  set topics $argv

  function _relink_topic -a topic
    source "$DOTDIR/$topic/_init"

    if test -n "$TARGET"
      _echo_ok "(re)linking $topic config files..."
      test "$TARGET" = "$HOME"; or mkdir -p $TARGET
      stow -v -t $TARGET -d $DOTDIR -R $topic
    else
      _echo_ok "$topic/_init#TARGET not defined, skipping config files..."
    end

    if test -d "$DOTDIR/$topic/bin"
      _echo_ok "(re)linking $topic bin..."
      stow -v -t $XDG_DATA_BIN -d "$DOTDIR/$topic" -R 'bin'
    end

    if test -d "$DOTDIR/$topic/conf.d"
      _echo_ok "(re)linking $topic conf.d..."
      stow -v -t $FISH_CONFIG_HOME -d "$DOTDIR/$topic" -R 'conf.d'
    end
  end

  for topic in $topics
    _is_enabled_topic $topic; and _relink_topic $topic
  end
end

function _unlink_topics -d "unlink one or more topics using stow if variable TARGET is defined"
  set topics $argv

  function _unlink_topic -a topic
    source "$DOTDIR/$topic/_init"

    if test -n "$TARGET"
      _echo_ok "(un)linking $topic config files..."
      stow -v -t $TARGET -d $DOTDIR -D $topic
      test "$TARGET" = "$HOME"; or rmdir -v $TARGET
    else
      _echo_ok "$topic/_init#TARGET not defined, skipping config files..."
    end

    if test -d "$DOTDIR/$topic/bin"
      _echo_ok "(un)linking $topic bin..."
      stow -v -t $XDG_DATA_BIN -d "$DOTDIR/$topic" -D 'bin'
    end

    if test -d "$DOTDIR/$topic/conf.d"
      _echo_ok "(un)linking $topic conf.d..."
      stow -v -t $FISH_CONFIG_HOME -d "$DOTDIR/$topic" -D 'conf.d'
    end
  end

  for topic in $topics
    _is_valid_topic $topic; and _unlink_topic $topic
  end
end

function _delete_topics -d "delete one or more topics by calling topic/_init#delete()"
  set topics $argv

  function _delete_topic -a topic
    source "$DOTDIR/$topic/_init"

    if _is_defined 'delete'
      _echo_ok "running $topic/_init#delete()..."
      delete
    end

    _unlink_topics $topic
  end

  for topic in $topics
    _disable_topic $topic; and _delete_topic $topic
  end
end

function _echo_usage -d "prints a help message"
  printf '%s\n' '
  usage: dot [ FLAGS ] [ TOPICS ]
  if no FLAGS are passed then given TOPICS are installed & linked

  valid FLAGS:
  -h/--help             : print this help message
  -L/--ls               : list enabled topics
  -l/--link   [ TOPICS ]: link given TOPICS
  -r/--relink [ TOPICS ]: relink given TOPICS
  -u/--unlink [ TOPICS ]: unlink given TOPICS
  -d/--delete [ TOPICS ]: delete given TOPICS

  example usage:
  dot base             # install and link base
  dot base zsh fish    # install and link base, zsh & fish
  dot -l base zsh fish # only link base, zsh & fish
  dot -d tmux          # delete tmux
  '
end

function _echo_ls
  set count (cat "$DOTDIR/.enabled_topics" | wc -l)
  echo (set_color --bold)'Enabled topics:'(set_color normal)
  if test "$count" -gt 0
    cat "$DOTDIR/.enabled_topics" | column
  else
    echo 'No topics enabled!'
  end
  echo (set_color --bold)'Disabled topics:'(set_color normal)
  comm -13 (cat .enabled_topics | sort | psub) (find . -name '_init' -type f -maxdepth 2 | sed -E 's|/_init$||' | sed -E 's@.*/@@' | sort | psub) | column
end

function dot
  argparse --name dot --exclusive 'h,l,L,d,u,r' 'h/help' 'L/ls' 'l/link=' 'u/unlink=' 'r/relink=' 'd/delete=' -- $argv
    or return

  if set -q _flag_h
    _echo_usage
  else if set -q _flag_L
    _echo_ls
  else if set -q _flag_l
    _link_topics $_flag_l $argv
  else if set -q _flag_u
    _unlink_topics $_flag_u $argv
  else if set -q _flag_r
    _relink_topics $_flag_r $argv
  else if set -q _flag_d
    _delete_topics $_flag_d $argv
  else if test -n "$argv"
    _install_topics $argv
  else
    echo 'No topic(s) given, did nothing.'
  end
end

dot $argv
